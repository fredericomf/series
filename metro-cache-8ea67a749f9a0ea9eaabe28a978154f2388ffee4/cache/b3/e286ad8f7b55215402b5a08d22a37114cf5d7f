__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
        value: true
    });
    var instances = [];

    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(exports.LogLevel || (exports.LogLevel = {}));

    var defaultLogLevel = exports.LogLevel.INFO;

    var defaultLogHandler = function defaultLogHandler(instance, logType) {
        var args = [];

        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }

        if (logType < instance.logLevel) return;
        var now = new Date().toISOString();

        switch (logType) {
            case exports.LogLevel.DEBUG:
                console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
                break;

            case exports.LogLevel.VERBOSE:
                console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
                break;

            case exports.LogLevel.INFO:
                console.info.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
                break;

            case exports.LogLevel.WARN:
                console.warn.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
                break;

            case exports.LogLevel.ERROR:
                console.error.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
                break;

            default:
                throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };

    var Logger = function () {
        function Logger(name) {
            this.name = name;
            this._logLevel = defaultLogLevel;
            this._logHandler = defaultLogHandler;
            instances.push(this);
        }

        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function get() {
                return this._logLevel;
            },
            set: function set(val) {
                if (!(val in exports.LogLevel)) {
                    throw new TypeError('Invalid value assigned to `logLevel`');
                }

                this._logLevel = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function get() {
                return this._logHandler;
            },
            set: function set(val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }

                this._logHandler = val;
            },
            enumerable: true,
            configurable: true
        });

        Logger.prototype.debug = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            this._logHandler.apply(this, [this, exports.LogLevel.DEBUG].concat(args));
        };

        Logger.prototype.log = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            this._logHandler.apply(this, [this, exports.LogLevel.VERBOSE].concat(args));
        };

        Logger.prototype.info = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            this._logHandler.apply(this, [this, exports.LogLevel.INFO].concat(args));
        };

        Logger.prototype.warn = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            this._logHandler.apply(this, [this, exports.LogLevel.WARN].concat(args));
        };

        Logger.prototype.error = function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }

            this._logHandler.apply(this, [this, exports.LogLevel.ERROR].concat(args));
        };

        return Logger;
    }();

    function setLogLevel(level) {
        instances.forEach(function (inst) {
            inst.logLevel = level;
        });
    }

    exports.setLogLevel = setLogLevel;
    exports.Logger = Logger;
});